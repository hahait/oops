"""
Django settings for oops project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from datetime import datetime,timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,os.path.join(BASE_DIR,"apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^epsv5ddqg4*+o-8grk7#!2g)nh&2743r$%q1266fh*ebq1=&2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    # 'mythrift',
    'django_celery_results',
    'django_celery_beat',
    'accounts.apps.AccountsConfig',
    'resources.apps.ResourcesConfig',
    'monitor.apps.MonitorConfig',
    'appsmanager.apps.AppsManagerConfig',
    'taskschedule.apps.TaskScheduleConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'oops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'oops',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '192.168.0.23',
        'PORT': 3306,
        'CONN_MAX_AGE': 600,
    },
    'zabbix': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'zabbix',
        'USER': 'zabbix',
        'PASSWORD': 'z123456',
        'HOST': '192.168.1.1',
        'PORT': 3306,
        'CONN_MAX_AGE': 600,
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'

USE_I18N = True

USE_L10N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
#STATIC_ROOT = os.path.join(BASE_DIR, "static")

# 修改默认的用户模型
AUTH_USER_MODEL = "accounts.UserProfileModel"

# 日志配置
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "loggers": {
        "info_logger": {
            "handlers": ["info_handler"],
            "level": "INFO",
            "propagate": False,
        },
        "error_logger": {
            "handlers": ["error_handler"],
            "level": "ERROR",
            "propagate": False,
        },
        "console_logger": {
            "handlers": ["console_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
        # 'django.db.backends': {
        #     'handlers': ['info_handler'],
        #     'level': 'DEBUG' if DEBUG else 'INFO',
        #     "propagate": False,
        # },
    },
    "handlers": {
        "info_handler": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(BASE_DIR,'logs','oops.log'),
            "when": "midnight",
            "backupCount": 7,
            "encoding": "utf8",
            "formatter": "verbose_format",
        },
        "error_handler": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(BASE_DIR,'logs','error.log'),
            "when": "midnight",
            "backupCount": 7,
            "encoding": "utf8",
            "formatter": "verbose_format",
        },
        "console_handler": {
            "class": "logging.StreamHandler",
            "formatter": "simple_format",
        },
    },
    "formatters": {
        "verbose_format": {
            "format": "%(asctime)s-[%(levelname)s]-%(pathname)s-[line:%(lineno)2d]-%(message)s"
        },
        "simple_format": {
            "format": "%(asctime)s-[%(levelname)s]-%(pathname)s-%(message)s"
        },
    },
    "root": {
        "handlers": ["info_handler"],
        "level": "INFO",
    },
}

# rest_framework 配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DEFAULT_PERMISSION_CLASSES': ('utils.permissions.MyDjangoModelPermissions',),
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.MyPagination',
    # 'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}
# jwt 认证
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': timedelta(hours=24),
    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_HEADER_PREFIX': 'TOKEN',
}

# 跨域访问
CORS_ORIGIN_ALLOW_ALL = True

# celery 配置
DJANGO_CELERY_BEAT_TZ_AWARE = False
BROKER_URL = 'amqp://admin:Dcba4312@192.168.0.19:5672//celery'
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULT_BACKEND='django-db'
CELERY_ACCEPT_CONTENT = ['json','pickle']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_COMPRESSION = 'gzip'
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'Asia/Shanghai'
# 设置每个 worker 子进程处理的任务数，处理完指定的任务数后 worker 子进程就会自动退出，同时启动新的子进程
CELERYD_MAX_TASKS_PER_CHILD = 10
# 设置 worker 进程数，但是 如果 启动 worker 时设置了 --autoscale 则该配置项无效
CELERYD_CONCURRENCY = 10
# task 的执行时间限制(硬限制)
CELERYD_TASK_TIME_LIMIT = 1800
# 设置预取值；默认值为 4
CELERYD_PREFETCH_MULTIPLIER = 2
# CELERYD_HIJACK_ROOT_LOGGER = False
# 配置 celery 任务执行结果的保存时长。默认是1天；单位：秒；必须要启动 celery beat，因为是调用的定时任务 celery.backend_cleanup
CELERY_TASK_RESULT_EXPIRES = 7 * 24 * 60 * 60
# broker 连接池
BROKER_POOL_LIMIT = 10
# broker 连接超时时间；单位：秒
BROKER_CONNECTION_TIMEOUT = 30
# broker 连接重试
BROKER_CONNECTION_RETRY = "Enabled"
# 最大的 连接重试次数
BROKER_CONNECTION_MAX_RETRIES = 10
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 1800}

from kombu import Queue,Exchange
CELERY_QUEUES = [
    Queue('celery',exchange=Exchange("celery",type="direct",delivery_mode=1),routing_key="celery",durable=False),
    Queue('resources',exchange=Exchange("resources",type="direct",delivery_mode=1),routing_key="resources",durable=False),
    Queue('appsmanager',exchange=Exchange("appsmanager",type="direct",delivery_mode=1),routing_key="appsmanager",durable=False),
    Queue('taskschedule',exchange=Exchange("taskschedule",type="direct",delivery_mode=1),routing_key="taskschedule",durable=False),
    Queue('monitor',exchange=Exchange("monitor",type="direct",delivery_mode=1),routing_key="monitor",durable=False),
]
# 由于 INSTALLED_APPS 导入模块的方式，所以使用这种方式导入 task
CELERY_IMPORTS = ("resources.tasks","taskschedule.tasks","monitor.tasks")
CELERY_ROUTES = ("resources.tasks.resources_route_task",
                 "taskschedule.tasks.taskschedule_route_task",
                 "monitor.tasks.monitor_route_task",
                 )
CELERY_TASK_DEFAULT_QUEUE = 'celery'
